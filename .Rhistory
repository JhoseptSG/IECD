n_vec[5]
n_vec = c(10,20,40,80,200)
θ_mon_mat <- matrix(0, nrow = 5, ncol = 1000)
θ_emv_mat <- matrix(0, nrow = 5, ncol = 1000)
θ_emv_ins_mat <- matrix(0, nrow = 5, ncol = 1000)
for (j in 1:5) {
n = n_vec[j]
θ_mon_vec = c()
θ_emv_vec = c()
θ_emv_ins_vec = c()
for (i in 1:1000 ) {
datos_uni = runif(n,0,θ_0)
θ_mon = 2 * mean(datos_uni)
θ_emv = max(datos_uni)
θ_emv_ins = θ_emv * (n+1)/n
θ_mon_vec = append(θ_mon_vec,θ_mon)
θ_emv_vec = append(θ_emv_vec,θ_emv)
θ_emv_ins_vec = append(θ_emv_ins_vec,θ_emv_ins)
}
θ_mon_mat[j, ] <- θ_mon_vec
θ_emv_mat[j, ] <- θ_emv_vec
θ_emv_ins_mat[j, ] <- θ_emv_ins_vec
}
n_vec[5]
est_mom_ecm_mom = c(mean(θ_mon_mat[1,]),mean(θ_mon_mat[2,]), mean(θ_mon_mat[3,]) , mean(θ_mon_mat[4,]))
est_mom_ecm_emv = c(mean(θ_emv_mat[1,]),mean(θ_emv_mat[2,]), mean(θ_emv_mat[3,]) , mean(θ_emv_mat[4,]))
est_mom_ecm_emv_ins = c(mean(θ_emv_ins_mat[1,]),mean(θ_emv_ins_mat[2,]), mean(θ_emv_ins_mat[3,]) , mean(θ_emv_ins_mat[4,]))
plot(1:4,est_mom_ecm_emv_ins)
boxplots()
n_vec = c(6,10,20,40,80,200)
θ_mon_mat <- matrix(0, nrow = 6, ncol = 1000)
θ_emv_mat <- matrix(0, nrow = 6, ncol = 1000)
θ_emv_ins_mat <- matrix(0, nrow = 6, ncol = 1000)
for (j in 1:5) {
n = n_vec[j]
θ_mon_vec = c()
θ_emv_vec = c()
θ_emv_ins_vec = c()
for (i in 1:1000 ) {
datos_uni = runif(n,0,θ_0)
θ_mon = 2 * mean(datos_uni)
θ_emv = max(datos_uni)
θ_emv_ins = θ_emv * (n+1)/n
θ_mon_vec = append(θ_mon_vec,θ_mon)
θ_emv_vec = append(θ_emv_vec,θ_emv)
θ_emv_ins_vec = append(θ_emv_ins_vec,θ_emv_ins)
}
θ_mon_mat[j, ] <- θ_mon_vec
θ_emv_mat[j, ] <- θ_emv_vec
θ_emv_ins_mat[j, ] <- θ_emv_ins_vec
}
n_vec[5]
est_mom_ecm_mom = c(mean(θ_mon_mat[1,]),mean(θ_mon_mat[2,]), mean(θ_mon_mat[3,]) , mean(θ_mon_mat[4,]))
est_mom_ecm_emv = c(mean(θ_emv_mat[1,]),mean(θ_emv_mat[2,]), mean(θ_emv_mat[3,]) , mean(θ_emv_mat[4,]))
est_mom_ecm_emv_ins = c(mean(θ_emv_ins_mat[1,]),mean(θ_emv_ins_mat[2,]), mean(θ_emv_ins_mat[3,]) , mean(θ_emv_ins_mat[4,]))
boxplot()
boxplot(est_mom_ecm_emv_ins)
#s
θ_mon_mat <- t(θ_mon_mat)
# Crear un boxplot
boxplot(θ_mon_mat, notch = FALSE, names = c("Fila 1", "Fila 2", "Fila 3", "Fila 4", "Fila 5", "Fila 6"),
xlab = "Filas", ylab = "Valores", main = "Boxplot de Filas")
# Crear un boxplot
boxplot(θ_mon_mat, notch = FALSE, names = n_vec,
xlab = "Filas", ylab = "Valores", main = "Boxplot de Filas")
# Crear un boxplot
boxplot(θ_mon_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
#s
θ_mon_mat = t(θ_mon_mat)
θ_emv_mat = t(θ_emv_mat)
θ_emv_ins_mat = t(θ_emv_ins_mat)
boxplot(θ_emv_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
boxplot(θ_mon_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
boxplot(θ_emv_mat, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
notch = FALSE,
boxplot(θ_emv_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
boxplot(θ_mon_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
boxplot(θ_emv_ins_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV sin sesgo")
boxplot(θ_emv_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
boxplot(θ_mon_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del Enom")
boxplot(θ_mon_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del Enom")
θ_emv_mat = t(θ_emv_mat)
boxplot(θ_mon_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del Enom")
dim(θ_mon_mat)
dim(θ_emv_mat)
dim(θ_emv_ins_mat)
est_mom_ecm_emv_ins = c(mean(θ_emv_ins_mat[1,]),mean(θ_emv_ins_mat[2,]), mean(θ_emv_ins_mat[3,]) , mean(θ_emv_ins_mat[4,]))
θ_emv_ins_mat = t(θ_emv_ins_mat)
dim(θ_emv_ins_mat)
boxplot(θ_emv_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
#s
θ_mon_mat = t(θ_mon_mat)
θ_emv_mat = t(θ_emv_mat)
θ_emv_ins_mat = t(θ_emv_ins_mat)
boxplot(θ_emv_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
boxplot(θ_mon_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del Enom")
boxplot(θ_emv_ins_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV sin sesgo")
boxplot(θ_emv_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
boxplot(θ_mon_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del Enom")
boxplot(θ_emv_ins_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV sin sesgo")
boxplot(θ_emv_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
line(y=θ_0)
abline(h=θ_0)
boxplot(θ_emv_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
abline(h=θ_0)
abline(h=θ_0, col = 'red')
boxplot(θ_emv_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
abline(h=θ_0, col = 'red')
boxplot(θ_emv_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
abline(h=θ_0, col = 'red')
boxplot(θ_mon_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del Enom")
abline(h=θ_0, col = 'red')
boxplot(θ_emv_ins_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV sin sesgo")
abline(h=θ_0, col = 'red')
boxplot(θ_emv_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
abline(h=θ_0, col = 'red')
boxplot(θ_mon_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del Enom")
abline(h=θ_0, col = 'red')
n_vec[1]
n_vec[5]
n_vec[6]
for (j in 1:6) {
n = n_vec[j]
θ_mon_vec = c()
θ_emv_vec = c()
θ_emv_ins_vec = c()
for (i in 1:1000 ) {
datos_uni = runif(n,0,θ_0)
θ_mon = 2 * mean(datos_uni)
θ_emv = max(datos_uni)
θ_emv_ins = θ_emv * (n+1)/n
θ_mon_vec = append(θ_mon_vec,θ_mon)
θ_emv_vec = append(θ_emv_vec,θ_emv)
θ_emv_ins_vec = append(θ_emv_ins_vec,θ_emv_ins)
}
θ_mon_mat[j, ] <- θ_mon_vec
θ_emv_mat[j, ] <- θ_emv_vec
θ_emv_ins_mat[j, ] <- θ_emv_ins_vec
}
n_vec = c(6,10,20,40,80,200)
θ_mon_mat <- matrix(0, nrow = 6, ncol = 1000)
θ_emv_mat <- matrix(0, nrow = 6, ncol = 1000)
θ_emv_ins_mat <- matrix(0, nrow = 6, ncol = 1000)
for (j in 1:6) {
n = n_vec[j]
θ_mon_vec = c()
θ_emv_vec = c()
θ_emv_ins_vec = c()
for (i in 1:1000 ) {
datos_uni = runif(n,0,θ_0)
θ_mon = 2 * mean(datos_uni)
θ_emv = max(datos_uni)
θ_emv_ins = θ_emv * (n+1)/n
θ_mon_vec = append(θ_mon_vec,θ_mon)
θ_emv_vec = append(θ_emv_vec,θ_emv)
θ_emv_ins_vec = append(θ_emv_ins_vec,θ_emv_ins)
}
θ_mon_mat[j, ] <- θ_mon_vec
θ_emv_mat[j, ] <- θ_emv_vec
θ_emv_ins_mat[j, ] <- θ_emv_ins_vec
}
est_mom_ecm_mom = c(mean(θ_mon_mat[1,]),mean(θ_mon_mat[2,]), mean(θ_mon_mat[3,]) , mean(θ_mon_mat[4,]))
est_mom_ecm_emv = c(mean(θ_emv_mat[1,]),mean(θ_emv_mat[2,]), mean(θ_emv_mat[3,]) , mean(θ_emv_mat[4,]))
est_mom_ecm_emv_ins = c(mean(θ_emv_ins_mat[1,]),mean(θ_emv_ins_mat[2,]), mean(θ_emv_ins_mat[3,]) , mean(θ_emv_ins_mat[4,]))
boxplot(est_mom_ecm_emv_ins)
θ_mon_mat = t(θ_mon_mat)
θ_emv_mat = t(θ_emv_mat)
θ_emv_ins_mat = t(θ_emv_ins_mat)
boxplot(θ_emv_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
abline(h=θ_0, col = 'red')
boxplot(θ_mon_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del Enom")
abline(h=θ_0, col = 'red')
boxplot(θ_emv_ins_mat, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV sin sesgo")
abline(h=θ_0, col = 'red')
plot(x_vec,est_mom_ecm_mom)
plot(n_vec,est_mom_ecm_mom)
est_mom_ecm_emv_ins = c(mean(θ_emv_ins_mat[1,]),mean(θ_emv_ins_mat[2,]), mean(θ_emv_ins_mat[3,]) , mean(θ_emv_ins_mat[4,]), mean(θ_emv_ins_mat[5,]) , mean(θ_emv_ins_mat[6,]))
# grafico los ecm estimados vs las n.
est_mom_ecm_mom = c(mean(θ_mon_mat[1,]),mean(θ_mon_mat[2,]), mean(θ_mon_mat[3,]) , mean(θ_mon_mat[4,]) , mean(θ_mon_mat[5,]) , mean(θ_mon_mat[6,]))
est_mom_ecm_emv = c(mean(θ_emv_mat[1,]),mean(θ_emv_mat[2,]), mean(θ_emv_mat[3,]) , mean(θ_emv_mat[4,]) , mean(θ_emv_mat[5,]) , mean(θ_emv_mat[6,]))
est_mom_ecm_emv_ins = c(mean(θ_emv_ins_mat[1,]),mean(θ_emv_ins_mat[2,]), mean(θ_emv_ins_mat[3,]) , mean(θ_emv_ins_mat[4,]), mean(θ_emv_ins_mat[5,]) , mean(θ_emv_ins_mat[6,]))
plot(n_vec,est_mom_ecm_mom)
# grafico los ecm estimados vs las n.
est_mom_ecm_mom = c(mean((θ_mon_mat[1,]-θ_0)**2),mean(θ_mon_mat[2,]), mean(θ_mon_mat[3,]) , mean(θ_mon_mat[4,]) , mean(θ_mon_mat[5,]) , mean(θ_mon_mat[6,]))
est_mom_ecm_mom <- numeric(6)
est_mom_ecm_emv <- numeric(6)
est_mom_ecm_emv_ins <- numeric(6)
# Calcular y almacenar el valor para θ_mon_mat
est_mom_ecm_mom[i] = mean((θ_mon_mat[i,] - θ_0)^2)
# Calcular y almacenar el valor para θ_emv_mat
est_mom_ecm_emv[i] = mean((θ_emv_mat[i,]- θ_0)^2)
# Calcular y almacenar el valor para θ_emv_ins_mat
est_mom_ecm_emv_ins[i] = mean((θ_emv_ins_mat[i,]- θ_0)^2)
for (i in 1:6) {
# Calcular y almacenar el valor para θ_mon_mat
est_mom_ecm_mom[i] = mean((θ_mon_mat[i,] - θ_0)^2)
# Calcular y almacenar el valor para θ_emv_mat
est_mom_ecm_emv[i] = mean((θ_emv_mat[i,]- θ_0)^2)
# Calcular y almacenar el valor para θ_emv_ins_mat
est_mom_ecm_emv_ins[i] = mean((θ_emv_ins_mat[i,]- θ_0)^2)
}
plot(n_vec,est_mom_ecm_mom)
est_mom_ecm_mom
(θ_mon_mat[i,] - θ_0
θ_0
θ_0
θ_mon_mat[i,] - θ_0
# creo la funcion para calcular los estimadores con distintos n.
n_vec = c(6,10,20,40,80,200)
θ_mon_mat <- matrix(0, nrow = 6, ncol = 1000)
θ_emv_mat <- matrix(0, nrow = 6, ncol = 1000)
θ_emv_ins_mat <- matrix(0, nrow = 6, ncol = 1000)
for (j in 1:6) {
n = n_vec[j]
θ_mon_vec = c()
θ_emv_vec = c()
θ_emv_ins_vec = c()
for (i in 1:1000 ) {
datos_uni = runif(n,0,θ_0)
θ_mon = 2 * mean(datos_uni)
θ_emv = max(datos_uni)
θ_emv_ins = θ_emv * (n+1)/n
θ_mon_vec = append(θ_mon_vec,θ_mon)
θ_emv_vec = append(θ_emv_vec,θ_emv)
θ_emv_ins_vec = append(θ_emv_ins_vec,θ_emv_ins)
}
θ_mon_mat[j, ] <- θ_mon_vec
θ_emv_mat[j, ] <- θ_emv_vec
θ_emv_ins_mat[j, ] <- θ_emv_ins_vec
}
θ_mon_mat_T = t(θ_mon_mat)
θ_emv_mat_T = t(θ_emv_mat)
θ_emv_ins_mat_T = t(θ_emv_ins_mat)
# grafico los boxplots de los estimadores
boxplot(θ_emv_mat_T, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
abline(h=θ_0, col = 'red')
boxplot(θ_mon_mat_T, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del Enom")
abline(h=θ_0, col = 'red')
boxplot(θ_emv_ins_mat_T, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV sin sesgo")
abline(h=θ_0, col = 'red')
est_mom_ecm_mom <- numeric(6)
est_mom_ecm_emv <- numeric(6)
est_mom_ecm_emv_ins <- numeric(6)
for (i in 1:6) {
# Calcular y almacenar el valor para θ_mon_mat
est_mom_ecm_mom[i] = mean((θ_mon_mat[i,] - θ_0)^2)
# Calcular y almacenar el valor para θ_emv_mat
est_mom_ecm_emv[i] = mean((θ_emv_mat[i,]- θ_0)^2)
# Calcular y almacenar el valor para θ_emv_ins_mat
est_mom_ecm_emv_ins[i] = mean((θ_emv_ins_mat[i,]- θ_0)^2)
}
plot(n_vec,est_mom_ecm_mom)
plot(n_vec,est_mom_ecm_mom , col = 'red')
plot(n_vec,est_mom_ecm_mom , col = 'red')
plot(n_vec,est_mom_ecm_emv , col = 'red')
plot(n_vec,est_mom_ecm_emv_ins , col = 'red')
plot(n_vec,est_mom_ecm_mom , col = 'red')
plot(n_vec,est_mom_ecm_emv , col = 'red')
plot(n_vec,est_mom_ecm_emv_ins , col = 'red')
plot(n_vec,est_mom_ecm_mom , col = 'red')
plot(n_vec,est_mom_ecm_emv , col = 'green')
plot(n_vec,est_mom_ecm_emv_ins , col = 'blue')
plot(n_vec,est_mom_ecm_emv , col = 'green')
for (i in 1:6) {
# Calcular y almacenar el valor para θ_mon_mat
est_mom_ecm_mom[i] = mean((θ_mon_mat[i,] - θ_0)^2)
# Calcular y almacenar el valor para θ_emv_mat
est_mom_ecm_emv[i] = mean((θ_emv_mat[i,]- θ_0)^2)
# Calcular y almacenar el valor para θ_emv_ins_mat
est_mom_ecm_emv_ins[i] = mean((θ_emv_ins_mat[i,]- θ_0)^2)
}
plot(n_vec,est_mom_ecm_mom , col = 'red')
plot(n_vec,est_mom_ecm_emv , col = 'darkgreen')
plot(n_vec,est_mom_ecm_emv_ins , col = 'blue')
plot(n_vec, est_mom_ecm_mom, col = 'red', type = 'b', pch = 19,
xlab = "Tamaño de la muestra", ylab = "Valor", main = "Comparación de Estimadores")
# Agregar líneas para otros estimadores
points(n_vec, est_mom_ecm_emv, col = 'darkgreen', type = 'b', pch = 19)
points(n_vec, est_mom_ecm_emv_ins, col = 'blue', type = 'b', pch = 19)
# Agregar leyenda
legend("topright", legend = c("Estimador MOM", "Estimador EMV", "Estimador EMV_INS", "Punto"),
col = c("red", "darkgreen", "blue", "black"), lty = 1, pch = c(19, 19, 19, 16))
# Agregar leyenda
legend("topright", legend = c("Estimador MOM", "Estimador EMV", "Estimador EMV_INS"),
col = c("red", "darkgreen", "blue"), lty = 1, pch = c(19, 19, 19, 16))
plot(n_vec, est_mom_ecm_mom, col = 'red', pch = 19,
xlab = "Tamaño de la muestra", ylab = "Valor", main = "Comparación de Estimadores")
# Agregar líneas para otros estimadores
points(n_vec, est_mom_ecm_emv, col = 'darkgreen', pch = 19)
points(n_vec, est_mom_ecm_emv_ins, col = 'blue', pch = 19)
plot(n_vec, est_mom_ecm_mom, col = 'red', type = 'b', pch = 19,
xlab = "Tamaño de la muestra", ylab = "Valor", main = "Comparación de Estimadores")
# Agregar líneas para otros estimadores
points(n_vec, est_mom_ecm_emv, col = 'darkgreen', type = 'b', pch = 19)
points(n_vec, est_mom_ecm_emv_ins, col = 'blue', type = 'b', pch = 19)
# Agregar leyenda
legend("topright", legend = c("Estimador MOM", "Estimador EMV", "Estimador EMV_INS"),
col = c("red", "darkgreen", "blue"), lty = 1, pch = c(19, 19, 19, 16))
est_mom_ecm_emv
est_mom_ecm_emv_ins
# Agregar leyenda
legend("topright", legend = c("Estimador MOM", "Estimador EMV", "Estimador EMV_INS"),
col = c("red", "darkgreen", "blue"), lty = 1, pch = c(19, 19, 19, 16))
# Agregar leyenda
legend("topright", legend = c("Estimador MOM", "Estimador EMV", "Estimador EMV_INS"),
col = c("red", "darkgreen", "blue"), lty = 1, pch = c(19, 19, 19, 16))
# Ejercicio 14
# sea x1..xn una muestra aleatoria con distribucion exponencial con lambda = 1.
# graficar la  ECDF vs CDF Real
n = 100
datos_exp = rexp(n, rate = 1)
ecdf_datos_exp = ecdf(datos_exp)
plot(ecdf_datos_exp)
x <- seq(0, max(datos), length.out = 1000)
y_real_exp = 1 - exp(- x)
plot(ecdf_datos_exp, col = 'blue', xlab = 'Valores', ylab = 'Probabilidad acumulada', main = 'ECDF vs. CDF Real')
lines(x, y_real_exp, col = 'red')
legend("topright", legend = c("ECDF", "CDF Real"), col = c('blue', 'red'), lty = 1)
λ_mom = 1 / mean(datos_exp) # λ_emv = 1 / mean(datos_exp) coinciden los estimadores
y_est_exp = 1 - exp(- λ_mom * x)
plot(ecdf_datos_exp, col = 'blue', xlab = 'Valores', ylab = 'Probabilidad acumulada', main = 'ECDF vs. CDF Real')
lines(x, y_real_exp, col = 'red')
lines(x, y_est_exp, col = 'green')
legend("topright", legend = c("ECDF", "CDF Real","CDF est"), col = c('blue', 'red','green'), lty = 1)
θ_0 = 3
# creo la funcion para calcular los estimadores con distintos n.
n_vec = c(6,10,20,40,80,200)
θ_mon_mat <- matrix(0, nrow = 6, ncol = 1000)
θ_emv_mat <- matrix(0, nrow = 6, ncol = 1000)
θ_emv_ins_mat <- matrix(0, nrow = 6, ncol = 1000)
for (j in 1:6) {
n = n_vec[j]
θ_mon_vec = c()
θ_emv_vec = c()
θ_emv_ins_vec = c()
for (i in 1:1000 ) {
datos_uni = runif(n,0,θ_0)
θ_mon = 2 * mean(datos_uni)
θ_emv = max(datos_uni)
θ_emv_ins = θ_emv * (n+1)/n
θ_mon_vec = append(θ_mon_vec,θ_mon)
θ_emv_vec = append(θ_emv_vec,θ_emv)
θ_emv_ins_vec = append(θ_emv_ins_vec,θ_emv_ins)
}
θ_mon_mat[j, ] <- θ_mon_vec
θ_emv_mat[j, ] <- θ_emv_vec
θ_emv_ins_mat[j, ] <- θ_emv_ins_vec
}
θ_mon_mat_T = t(θ_mon_mat)
θ_emv_mat_T = t(θ_emv_mat)
θ_emv_ins_mat_T = t(θ_emv_ins_mat)
# grafico los boxplots de los estimadores
boxplot(θ_emv_mat_T, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV")
abline(h=θ_0, col = 'red')
boxplot(θ_mon_mat_T, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del Enom")
abline(h=θ_0, col = 'red')
boxplot(θ_emv_ins_mat_T, notch = FALSE, names = n_vec,
xlab = "tamaño de la muestra", ylab = "Valores", main = "Boxplot del EMV sin sesgo")
abline(h=θ_0, col = 'red')
est_mom_ecm_mom <- numeric(6)
est_mom_ecm_emv <- numeric(6)
est_mom_ecm_emv_ins <- numeric(6)
for (i in 1:6) {
est_mom_ecm_mom[i] = mean((θ_mon_mat[i,] - θ_0)^2)
est_mom_ecm_emv[i] = mean((θ_emv_mat[i,]- θ_0)^2)
est_mom_ecm_emv_ins[i] = mean((θ_emv_ins_mat[i,]- θ_0)^2)
}
plot(n_vec, est_mom_ecm_mom, col = 'red', type = 'b', pch = 19,
xlab = "Tamaño de la muestra", ylab = "Valor", main = "Comparación de Estimadores")
# Agregar líneas para otros estimadores
points(n_vec, est_mom_ecm_emv, col = 'darkgreen', type = 'b', pch = 19)
points(n_vec, est_mom_ecm_emv_ins, col = 'blue', type = 'b', pch = 19)
# Agregar leyenda
legend("topright", legend = c("Estimador MOM", "Estimador EMV", "Estimador EMV_INS"),
col = c("red", "darkgreen", "blue"), lty = 1, pch = c(19, 19, 19, 16))
plot(n_vec, est_mom_ecm_mom, col = 'red', type = 'b', pch = 19,
xlab = "Tamaño de la muestra", ylab = "Valor", main = "Comparación de Estimadores")
# Agregar líneas para otros estimadores
points(n_vec, est_mom_ecm_emv, col = 'darkgreen', type = 'b', pch = 19)
points(n_vec, est_mom_ecm_emv_ins, col = 'blue', type = 'b', pch = 19)
# Agregar leyenda
legend("topright", legend = c("Estimador MOM", "Estimador EMV", "Estimador EMV_INS"),
col = c("red", "darkgreen", "blue"), lty = 1, pch = c(19, 19, 19, 16))
tormentas = read.table("datasets/tormentas.txt", header = TRUE)
tormentas = read.table("/datasets/tormentas.txt", header = TRUE)
tormentas = read.table("\datasets\tormentas.txt", header = TRUE)
setwd("~/")
setwd("~/")
setwd("C:/Users/Goico/Desktop/Github/Facu/IECD")
tormentas = read.table("\datasets\tormentas.txt", header = TRUE)
tormentas = read.table("/datasets/tormentas.txt", header = TRUE)
tormentas = read.table("/datasets/tormenta.txt", header = TRUE)
tormentas = read.table("datasets/tormenta.txt", header = TRUE)
tormentas
installed.packages(MASS)
install.packages("MASS")
library(MASS)
fitdistr(x, densfun = "gamma")
help(fitdistr)
View(tormentas)
View(tormentas)
x = tormentas$X16.3
fitdistr(x, densfun = "gamma")
Gam_emv = fitdistr(x, densfun = "gamma")
Gam_emv
gam_emv = fitdistr(x, densfun = "gamma")
gam_emv
gam_mon = c(mean(x)^2/(mean(x^2)-mean(x)) ,  mean(x)/(mean(x^2)-mean(x)))
gam_mom = c(mean(x)^2/(mean(x^2)-mean(x)) ,  mean(x)/(mean(x^2)-mean(x)))
gam_mom
gam_mom
gam_emv = fitdistr(x, densfun = "gamma")
gam_emv
gam_mom
gam_mom = c(mean(x)^2/(mean(x^2)-mean(x)^2) ,  mean(x)/(mean(x^2)-mean(x)^2) )
gam_mom
gam_emv
gam_emv[1]
gam_emv[1]
gam_emv[shape]
gam_emv['shape']
gam_emv["shape"]
gam_emv[1]
gam_emv[1][1]
gam_emv[1][1][1]
gam_emv[1,1]
type(gam_emv)
prob_Gamma_emv = 1 - pgamma(20, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"])
prob_Gamma_emv
prob_Gamma_mom = 1 - pgamma(20, shape = gam_mom[1], rate = gam_mom[2])
prob_Gamma_mom
sum(x<=20)
x<=20
(x>20)/length(x)
sum((x>20))/length(x)
frec_rel_gamma = sum((x>20))/length(x)
hist(x)
hist(x)
curve(dgamma(x, shape = alpha, rate = lambda), col = "blue", add = TRUE)
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE)
hist(x)
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE)
curve(pgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE)
hist(x)
curve(pgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE)
hist(x, breaks = 20, prob = TRUE, main = "Histograma y Estimaciones de Densidad")
curve(pgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE)
hist(x, breaks = 20, prob = TRUE, main = "Histograma y Estimaciones de Densidad")
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE)
hist(x, breaks = 20, prob = TRUE, main = "Histograma y Estimaciones de Densidad")
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE)
curve(dgamma(x, shape = alpha_emv, rate = beta_emv), col = "green", add = TRUE)
hist(x, breaks = 20, prob = TRUE, main = "Histograma y Estimaciones de Densidad")
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE)
curve(dgamma(x, shape = gam_mom[1], rate = gam_mom[2]), col = "green", add = TRUE)
hist(x, breaks = 20, prob = TRUE, main = "Histograma y Estimaciones de Densidad")
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE)
curve(dgamma(x, shape = gam_mom[1], rate = gam_mom[2]), col = "green", add = TRUE)
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE, lwd = 3)
curve(dgamma(x, shape = gam_mom[1], rate = gam_mom[2]), col = "green", add = TRUE)
curve(dgamma(x, shape = gam_mom[1], rate = gam_mom[2]), col = "green", add = TRUE,lwd = 1)
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE, lwd = 3)
curve(dgamma(x, shape = gam_mom[1], rate = gam_mom[2]), col = "green", add = TRUE,lwd = 2)
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE, lwd = 2)
curve(dgamma(x, shape = gam_mom[1], rate = gam_mom[2]), col = "green", add = TRUE,lwd = 2)
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE, lwd = 2)
curve(dgamma(x, shape = gam_mom[1], rate = gam_mom[2]), col = "green", add = TRUE,lwd = 3)
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE, lwd = 2)
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE, lwd = 1)
curve(dgamma(x, shape = gam_mom[1], rate = gam_mom[2]), col = "green", add = TRUE,lwd = 3)
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE, lwd = 1)
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE, lwd = 1.5)
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE, lwd = 1.8)
curve(dgamma(x, shape = gam_emv$estimate["shape"], rate = gam_emv$estimate["rate"]), col = "blue", add = TRUE, lwd = 2)
lines(density(x), col = "red")
lines(density(x), col = "red", lwd = 2)
helph(density)
help(density)
